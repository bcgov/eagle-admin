name: Deploy to Test

on:
  repository_dispatch:
    # Trigger from repository dispatch workflow in promotion/test branch
    types: [trigger-test-deploy]

permissions: write-all

env:
  OPENSHIFT_NAMESPACE: 6cdc9e-tools
  IMAGE_NAME: eagle-admin
  PROD_PROMO_BRANCH: promotion/prod
  PROD_PROMO_PR_BRANCH: promotion/prod-pr

jobs:
  deploy:
    name: Deploy to Test
    runs-on: ubuntu-latest
    outputs:
      COMMIT_SHA: ${{ steps.read-hash.outputs.SHA }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: "promotion/test"

      - name: Retrieve previous commit hash
        id: read-hash
        run: echo "SHA=$(jq -r '.commit' state.json)" >> $GITHUB_OUTPUT

      - name: Install OpenShift CLI
        run: |
          curl -LO "https://mirror.openshift.com/pub/openshift-v4/clients/ocp/latest/openshift-client-linux.tar.gz"
          tar -xvzf openshift-client-linux.tar.gz
          sudo mv oc /usr/local/bin/
          rm -f openshift-client-linux.tar.gz

      - name: Log into OpenShift
        uses: redhat-actions/oc-login@v1
        with:
          openshift_server_url: ${{ secrets.OPENSHIFT_URL }}
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}

      - name: Tag image
        run: |
          oc -n ${{ env.OPENSHIFT_NAMESPACE }} tag --reference-policy='local' ${{ env.IMAGE_NAME }}:test ${{ env.IMAGE_NAME }}:test-backup
          oc -n ${{ env.OPENSHIFT_NAMESPACE }} tag --reference-policy='local' ${{ env.IMAGE_NAME }}:ci-latest ${{ env.IMAGE_NAME }}:test

  sync-test-branch:
    name: Rebase test branch from develop
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          ref: "test"
      - run: |
          git fetch origin develop
          git rebase ${{needs.deploy.outputs.COMMIT_SHA}} test
          git push origin test
  
  promotion:
    name: Create Promotion Pull Request
    needs: [deploy, sync-test-branch]
    runs-on: ubuntu-latest
    steps:
      # Update promotion/prod-pr with new commit hash
      - name: Checkout promotion/prod
        uses: actions/checkout@v3
        with:
          ref: "${{ env.PROD_PROMO_BRANCH }}"
      - name: Update state.json
        run: |
          git config --global user.name "${{ github.actor }}"
          git config --global user.email "${{github.actor}}@users.noreply.github.com"
          git checkout -B ${{ env.PROD_PROMO_PR_BRANCH }}
          git reset --hard ${{ env.PROD_PROMO_BRANCH }}
          echo $(jq '.commit="${{ needs.deploy.outputs.COMMIT_SHA }}"' state.json) > state.json
          git commit -am "Promote commit ${{ needs.deploy.outputs.COMMIT_SHA }} to Production"
          git push --force origin ${{ env.PROD_PROMO_PR_BRANCH }}
      - name: Create Pull Request if not exists
        run: |
          gh pr list --base "${{ env.PROD_PROMO_BRANCH }}" --head "${{ env.PROD_PROMO_PR_BRANCH }}" --json number --jq '.[0]' | grep -q null && \
          gh pr create \
          --base "${{ env.PROD_PROMO_BRANCH }}" \
          --head "${{ env.PROD_PROMO_PR_BRANCH }}" \
          --title "Deploy to Prod Environment" \
          --body ":crown: *An automated PR*\n\nThis PR triggers an deployment to Production once it's fully merged." \
          --label "auto-pr,prod env,pipeline" \
          --draft || \
            echo "PR already exists, skipping creation."

        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
